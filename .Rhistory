??columnmeans
class(iris)
?apply
apply(iris,2,mean)
?mean
apply(iris,2,mean,na.rm=TRUE)
iris
l <- list(a = 1:10, b = 11:20)
l
?apply
iris['Sepal.Length']
apply(iris['Sepal.Length'],2,mean,na.rm=TRUE)
iris
class(iris['Sepal.Length'])
class(iris['Sepal.Length']).asvector
colmeans(iris)
colMeans(iris)
iris
apply(iris,1,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(iris)
data(mtcars)
mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars,2,mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?with
?iris
dimnames(iris)
with(iris,tapply(Species,Sepal.Length,mean))
iris
with(iris,tapply(Species,Sepal.Length,mean,na.rm=TRUE))
warnings()
with(iris,tapply(Sepal.Length,Species,mean,na.rm=TRUE))
with(iris,tapply(Sepal.Length,Species,mean))
mtcars
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
82.63636-122.28571
122.28571-82.63636
debug(ls)
ls
?ls
?ls
ls()
library(datasets)
data(mtcars)
ls()
debug(ls)
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
;
library(datasets)
data(iris)
tapply(iris.Sepal.Length,Species,mean)
tapply(iris$Sepal.Length,Species,mean)
iris
tapply(iris$Sepal.Length,iris$Species,mean)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
?tapply
mtcars$mpg
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
?as.factor()
set.seed(1)
?rpois
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
?rnorm
rnorm(3)
dnorm(3)
pnorm(3)
qnorm(3)
?set.seed
?set.seed()
set.seed()
set.seed(1)
rnorm(1)
set.seed(1)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(3)
rnorm(2)
rnorm(2)
set.seed(3)
rnorm(2)
rpois(5, 2)
?rpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
e
?rnorm
y <- 0.5 + 2 * x + e
y
library(quantmod)
install.packages(quantmod)
install.packages('quantmod')
library(quantmod)
?getSymbols()
amzn = getSymbols("AMZN",auto.assign=FALSE)
View(amzn)
View(amzn)
count(amzn)
str(amzn)
sampleTimes = index(amzn)
str(sampleTimes)
sampleTimes[999]
grep()
?grep()
sampleTimes[grep('2012',sampleTimes)]
len(sampleTimes[grep('2012',sampleTimes)])
length(sampleTimes[grep('2012',sampleTimes)])
weekdays(sampleTimes[grep('2012',sampleTimes)])
length(x[grep('Monday',x)])
x
x=weekdays(sampleTimes[grep('2012',sampleTimes)])
length(x[grep('Monday',x)])
colors()
colors[640]
colors(c(640))
x = rnorm(100)
hist(x)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
;
head(Diet)
library(nlme)
head(BodyWeight)
colnames(BodyWeight)
sapply(BodyWeight,class)
levels(BodyWeight$Diet)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
;
labels(BodyWeight$Diet,c("One","Two","Three"))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages(ggplot2)
install.packages()
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
head(airquality)
str(airquality)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
str(movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
p <- x/sum(x)
x = 1:4
x
p <- x/sum(x)
p
sum(x)
temp <- rbind(x, p)
temp
rownames(temp) <- c("X", "Prob")
temp
setwd('/Users/jonporterjones/Coursera/ReproducibleResearch/AssignmentI/Repo/RepData_PeerAssessment1')
data=read.csv('activity.csv',stringsAsFactors=FALSE)
data$date=as.Date(data$date)
weekdays(data$date)
data$daysofweek = weekdays(data$date)
sapply(bind2, class)
sapply(data, class)
data$daysofweek = as.factor(weekdays(data$date))
sapply(data, class)
# read data table, set nulls, type columns
# read data table, set nulls, type columns
setwd('/Users/jonporterjones/github/ExData_Plotting1')
electricity=read.table('./household_power_consumption.txt',header=TRUE,sep=";",na.strings="?",as.is=TRUE)
electricity$DateTime=strptime(paste(electricity$Date,electricity$Time),"%d/%m/%Y %H:%M:%S")
electricity$Date=as.Date(electricity$Date, format = "%d/%m/%Y")
# I only want dates between
#2007-02-01 and 2007-02-02
#create a logical vector of all dates between our range
electricityDateVector=as.logical(electricity$DateTime>=as.Date(c("2007-02-01"))) & as.logical(electricity$DateTime<=as.Date(c("2007-02-02")))
#head(electricityDateVector)
electricityWithDateRange=electricity[electricityDateVector,]
# Now create a plot for it.
# This is the first plot
colnames(electricityWithDateRange)
par(mfrow=c(1,1))
hist(electricityWithDateRange$Global_active_power,xlab="Global Active Power (killowats)",col="red",main="Global Active Power")
dev.copy(png, file = "plot1.png") ## Copy my plot to a PNG file
dev.off()
# This is the second
par(mfrow=c(1,1))
plot(electricityWithDateRange$DateTime,electricityWithDateRange$Global_active_power,type="l",xlab="",ylab="Global Active Power (killowats)",main="")
#3rd
par(mfrow=c(1,1))
plot(electricityWithDateRange$DateTime,electricityWithDateRange$Sub_metering_1,type="l",xlab="",ylab="Energy sub metering")
points(electricityWithDateRange$DateTime,electricityWithDateRange$Sub_metering_2, col = "red", type="l")
points(electricityWithDateRange$DateTime,electricityWithDateRange$Sub_metering_3, col = "blue", type="l")
legend("topright", col = c("black","red", "blue"), cex=0.4, lty=1, legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
colnames(electricityWithDateRange)
#4th
par(mfrow=c(2,2))
with(electricityWithDateRange,
{
plot(DateTime,Global_active_power,type="l",xlab="",ylab="Global Active Power (killowats)",main="")
plot(DateTime,Voltage,type="l",xlab="",ylab="Voltage",main="")
plot(DateTime,Sub_metering_1,type="l",xlab="",ylab="Energy sub metering")
points(DateTime,Sub_metering_2, col = "red", type="l")
points(DateTime,Sub_metering_3, col = "blue", type="l")
legend("topright", col = c("black","red", "blue"), bty = "n", lty=1, legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(DateTime,Global_reactive_power,type="l",xlab="",ylab="Global_reactive_power",main="")
}
)
dev.copy(png, file = "plot4.png") ## Copy my plot to a PNG file
dev.off()
# this will give you the data types of the columns in a frame
sapply(electricity, class)
setwd('/Users/jonporterjones/github/ExData_Plotting1')
electricity=read.table('./household_power_consumption.txt',header=TRUE,sep=";",na.strings="?",as.is=TRUE)
electricity$DateTime=strptime(paste(electricity$Date,electricity$Time),"%d/%m/%Y %H:%M:%S")
electricity$Date=as.Date(electricity$Date, format = "%d/%m/%Y")
electricityDateVector=as.logical(electricity$DateTime>=as.Date(c("2007-02-01"))) & as.logical(electricity$DateTime<=as.Date(c("2007-02-02")))
#head(electricityDateVector)
electricityWithDateRange=electricity[electricityDateVector,]
electricityDateVector=as.logical(electricity$DateTime>=as.Date(c("2007-02-01"))) & as.logical(electricity$DateTime<=as.Date(c("2007-02-02")))
data[daysofweek=='Saturday']
data$daysofweek = as.factor(weekdays(data$date))
data[daysofweek=='Saturday',]
head(data)
data[data$daysofweek=='Saturday',]
data[data$daysofweek=='Saturday' || data$daysofweek=='Sunday',]
data[data$daysofweek=='Saturday' && data$daysofweek=='Sunday',]
data[(data$daysofweek=='Saturday' && data$daysofweek=='Sunday'),]
data[(data$daysofweek=='Saturday' && data$daysofweek=='Sunday'),]
data[(data$daysofweek=='Saturday']
data[(data$daysofweek=='Saturday')]
data[data$daysofweek=='Saturday']
data[(data$daysofweek=='Saturday' && data$daysofweek=='Sunday'),]
data[data$daysofweek=='Saturday',]
data[data$daysofweek=='Sunday',]
data[(data$daysofweek=='Saturday') || (data$daysofweek=='Sunday'),]
data[(data$daysofweek=='Saturday') && (data$daysofweek=='Sunday'),]
data[(data$daysofweek=='Saturday') & (data$daysofweek=='Sunday'),]
data[data$daysofweek=='Saturday' & data$daysofweek=='Sunday',]
data[data$daysofweek=='Saturday'] & data[data$daysofweek=='Sunday']
data[data[data$daysofweek=='Saturday'] & data[data$daysofweek=='Sunday'],]
weekendLogical=as.logical(data[data$daysofweek=='Saturday']) & as.logical(data[data$daysofweek=='Sunday'])
weekendLogical=as.logical(data$daysofweek=='Saturday') & as.logical(data$daysofweek=='Sunday')
weekendLogical
weekendLogical=as.logical(data$daysofweek=='Saturday') | as.logical(data$daysofweek=='Sunday')
weekendLogical
data[weekendLogical,]
sapply(data, class)
data[!weekendLogical,]
WeekendFrame=data[weekendLogical,]
WeekdayFrame=data[!weekendLogical,]
WeekendGrouped=with(WeekendFrame,tapply(steps,interval,mean,na.rm=T))
WeekdayGrouped=with(WeekdayFrame,tapply(steps,interval,mean,na.rm=T))
head(WeekendGrouped)
head(WeekdayGrouped)
WeekendGroupedFrame=data.frame(names(WeekendGrouped),WeekendGrouped)
WeekdayGroupedFrame=data.frame(names(WeekdayGrouped),WeekdayGrouped)
head(WeekdayGrouped)
par(mfrow=c(2,1))
plot(names(WeekendGroupedFrame),WeekendGroupedFrame,type="l",xlab="5 minute interval",ylab="average number of steps"),
plot(names(WeekdayGroupedFrame),WeekdayGroupedFrame,type="l",xlab="5 minute interval",ylab="average number of steps")
par(mfrow=c(2,1))
plot(names(WeekendGroupedFrame),WeekendGroupedFrame,type="l",xlab="5 minute interval",ylab="average number of steps")
plot(names(WeekdayGroupedFrame),WeekdayGroupedFrame,type="l",xlab="5 minute interval",ylab="average number of steps")
plot(names(WeekendGroupedFrame),WeekendGroupedFrame,type="l",xlab="5 minute interval",ylab="average number of steps")
head(WeekdayGroupedFrame)
s.WeekdayGrouped.,WeekendGroupedFrame$WeekdayGrouped,type="l",xlab="5 minute interval",ylab="average number of steps")
plot(WeekendGroupedFrame$names.WeekdayGrouped.,WeekendGroupedFrame$WeekdayGrouped,type="l",xlab="5 minute interval",ylab="average number of steps")
names(WeekendGroupedFrame)
plot(WeekendGroupedFrame$names.WeekendGrouped.,WeekendGroupedFrame$WeekendGrouped,type="l",xlab="5 minute interval",ylab="average number of steps")
head(WeekendGroupedFrame)
sapply(WeekendGroupedFrame, class)
WeekendGroupedFrame=data.frame(names(WeekendGrouped),as.double(WeekendGrouped))
sapply(WeekendGroupedFrame, class)
head(WeekendGroupedFrame)
names(WeekendGroupedFrame)
plot(WeekendGroupedFrame$names.WeekendGrouped.,WeekendGroupedFrame$as.double.WeekendGrouped.,type="l",xlab="5 minute interval",ylab="average number of steps")
head(WeekendGroupedFrame)
names(WeekendGroupedFrame)
plot(WeekendGroupedFrame$names.WeekendGrouped.,WeekendGroupedFrame$as.double.WeekendGrouped.)
DataGrouped=with(data,tapply(steps,interval,mean,na.rm=T))
test = data.frame(names(DataGrouped),DataGrouped) # This will build this into a data frame
max(test$DataGrouped)
test[test$DataGrouped==max(test$DataGrouped),]  # This is it - this is the 5 minute interval with the max!!!
head(DataGrouped)
# I don't like that the output of this is an array - makes it hard to deal with
DataGrouped[2]
names(DataGrouped)
plot(names(DataGrouped),DataGrouped,type="l",xlab="5 minute interval",ylab="average number of steps")
str(test)
plot(test$names.DataGrouped.,test$DataGrouped,type="l",xlab="5 minute interval",ylab="average number of steps")
str(SourceData)
setwd('/Users/jonporterjones/Coursera/ReproducibleResearch/AssignmentI/Repo/RepData_PeerAssessment1')
SourceData=read.csv('activity.csv',stringsAsFactors=FALSE)
SourceData$date=as.Date(data$date)
str(SourceData)
setwd('/Users/jonporterjones/Coursera/ReproducibleResearch/AssignmentI/Repo/RepData_PeerAssessment1')
SourceData=read.csv('activity.csv')
SourceData$date=as.Date(data$date)
str(SourceData)
setwd('/Users/jonporterjones/Coursera/ReproducibleResearch/AssignmentI/Repo/RepData_PeerAssessment1')
SourceData=read.csv('activity.csv')
SourceData$date=as.Date(SourceData$date)
SourceData$interval=as.factor(SourceData$interval)
str(SourceData)
stepsPerDay=with(SourceData,tapply(steps,date,sum,na.rm=T))
hist(stepsPerDay)
mean(stepsPerDay)
median(stepsPerDay)
class(stepsPerDay)
setwd('/Users/jonporterjones/Coursera/ReproducibleResearch/AssignmentI/Repo/RepData_PeerAssessment1')
data=read.csv('activity.csv',stringsAsFactors=FALSE)
data$date=as.Date(data$date)
head(data)
stepsPerDay=with(data,tapply(steps,date,sum,na.rm=T))
stepsPerDay
mean(stepsPerDay) # Calculate the mean
median(stepsPerDay)
apply(stepsPerDay,2,mean)
meanStepsPerDay=with(data,tapply(steps,date,mean,na.rm=T))
meanStepsPerDay
hist(stepsPerDay) # I guess this actually is a hist as opposed to a plot.  It lists the number of times this many steps were taken per day.
class(stepsPerDay)
str(data)
setwd('/Users/jonporterjones/Coursera/ReproducibleResearch/AssignmentI/Repo/RepData_PeerAssessment1')
SourceData=read.csv('activity.csv')
SourceData$date=as.Date(SourceData$date)
str(SourceData)
stepsPerDay=with(SourceData,tapply(steps,date,sum,na.rm=T))
class(stepsPerDay)
hist(stepsPerDay)
mean(stepsPerDay)
median(stepsPerDay)
AverageByInterval=data.frame(with(SourceData,tapply(steps,interval,mean,na.rm=T)))
class(AverageByInterval)
str(AverageByInterval)
head(AverageByInterval)
str(SourceData)
AverageByInterval$chr
AverageByInterval=with(data,tapply(steps,interval,mean,na.rm=T))
AverageByInterval=with(SourceData,tapply(steps,interval,mean,na.rm=T))
AverageByIntervalFrame = data.frame("Interval"=names(DataGrouped),"Average"=DataGrouped)
AverageByIntervalFrame = data.frame("Interval"=names(AverageByInterval),"Average"=AverageByInterval)
str(AverageByIntervalFrame)
head(AverageByInterval)
head(AverageByInterval[])
head(AverageByInterval.value)
AverageByInterval[,]
class(AverageByInterval)
AverageByInterval
AverageByInterval[1]
as.Vector(AverageByInterval)
as.vector(AverageByInterval)
AverageByIntervalFrame = data.frame("Interval"=names(AverageByInterval),"Average"=as.vector(AverageByInterval))
str(AverageByIntervalFrame)
str(SourceData) # this can be removed
AverageByIntervalFrame = data.frame("Interval"=as.integer(names(AverageByInterval)),"Average"=as.vector(AverageByInterval))
str(AverageByIntervalFrame)
head(AverageByIntervalFrame)
plot(AverageByIntervalFrame$Interval,AverageByIntervalFrame$Average,type="l",xlab="5 minute interval",ylab="average number of steps")
max(AverageByIntervalFrame$Average)
AverageByIntervalFrame[AverageByIntervalFrame$Average==max(AverageByIntervalFrame$Average),]  # This is it - this is the 5 minute interval with the max!!!
- the last line will give you the row from the data frame containing the highest average.  It is ** Interval 835 ** and this is consistent with our plot
AverageByInterval=with(SourceData,tapply(steps,interval,mean,na.rm=T))
AverageByIntervalFrame = data.frame("Interval"=as.integer(names(AverageByInterval)),"Average"=as.vector(AverageByInterval))
plot(AverageByIntervalFrame$Interval,AverageByIntervalFrame$Average,type="l",xlab="5 minute interval",ylab="average number of steps")
AverageByIntervalFrame[AverageByIntervalFrame$Average==max(AverageByIntervalFrame$Average),]
SourceLogical = is.na(SourceData$steps) #this creates a logical vector containing the na's
sum(SourceLogical) # There are 2304 rows with NA values for steps.
SourceNAOnly=SourceData[SourceLogical,] # This would create a data frame only of the nulls.
head(SourceNAOnly)
head(AverageByIntervalFrame)
SourceNAOnlyMergedWithAverage=merge(AverageByIntervalFrame,SourceNAOnly,by.x = "interval", by.y = "Interval")
SourceNAOnlyMergedWithAverage=merge(AverageByIntervalFrame,SourceNAOnly, by.x = "Interval", by.y = "interval")
head(SourceNAOnlyMergedWithAverage)
head(SourceData[!SourceLogical,])
names(SourceNAOnlyMergedWithAverage) = c("interval","steps","NA","date")
head(SourceNAOnlyMergedWithAverage) #Merge data frame of averages with data frame of NA's.
myNewFrame=rbind(SourceNAOnlyMergedWithAverage,SourceData[!SourceLogical,]) #rbind matches by name, so I'll have to get the names correct.
SourceNAOnlyMergedWithAverage=SourceNAOnlyMergedWithAverage[,c("interval","steps","date")]
head(SourceNAOnlyMergedWithAverage) #Merge data frame of averages with data frame of NA's.
myNewFrame=rbind(SourceNAOnlyMergedWithAverage,SourceData[!SourceLogical,]) #rbind matches by name, so I'll have to get the names correct.
myNewFrame[c(1:1000),]
head(myNewFrame)
str(myNewFrame)
StepsPerDayBoundWithAverage=with(SourceDataBoundWithAverage,tapply(steps,date,sum,na.rm=T))
SourceDataBoundWithAverage=rbind(SourceNAOnlyMergedWithAverage,SourceData[!SourceLogical,])
myNewFrame=rbind(SourceNAOnlyMergedWithAverage,SourceData[!SourceLogical,]) #rbind matches by name, so I'll have to get the names correct.
StepsPerDayBoundWithAverage=with(SourceDataBoundWithAverage,tapply(steps,date,sum,na.rm=T))
hist(StepsPerDayBoundWithAverage)
mean(StepsPerDayBoundWithAverage)
median(StepsPerDayBoundWithAverage)
hist(stepsPerDay)
mean(stepsPerDay)
median(stepsPerDay)
par(mfrow=c(2,1))
hist(stepsPerDay)
hist(StepsPerDayBoundWithAverage)
SourceLogical = is.na(SourceData$steps) #this creates a logical vector containing the na's
sum(SourceLogical) # There are 2304 rows with NA values for steps.
SourceNAOnly=SourceData[SourceLogical,] # This creates a data frame only of the nulls.
#Merge data frame of averages with data frame of NA's.
SourceNAOnlyMergedWithAverage=merge(AverageByIntervalFrame,SourceNAOnly, by.x = "Interval", by.y = "interval")
# rename the columns to match the original SourceData
names(SourceNAOnlyMergedWithAverage) = c("interval","steps","NA","date")
# drop the colum NA
SourceNAOnlyMergedWithAverage=SourceNAOnlyMergedWithAverage[,c("interval","steps","date")]
# now bind the NA's replaced wiht average with all the rows that were not NA
SourceDataBoundWithAverage=rbind(SourceNAOnlyMergedWithAverage,SourceData[!SourceLogical,])
# sum it all up, plot the 2 histograms and report the mean/median.
StepsPerDayBoundWithAverage=with(SourceDataBoundWithAverage,tapply(steps,date,sum,na.rm=T))
par(mfrow=c(2,1))
hist(stepsPerDay)
hist(StepsPerDayBoundWithAverage)
mean(StepsPerDayBoundWithAverage)
median(StepsPerDayBoundWithAverage)
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,main = "rpois(100, lambda = 5)")
points(x, cex = .5, col = "dark red")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
SourceData$daysofweek = as.factor(weekdays(SourceData$date))
weekendLogical=as.logical(data$daysofweek=='Saturday') | as.logical(data$daysofweek=='Sunday')
weekendLogical=as.logical(SourceData$daysofweek=='Saturday') | as.logical(SourceData$daysofweek=='Sunday')
WeekendFrame=SourceData[weekendLogical,]
SourceData=cbind(SourceData,weekendLogical)
head(SourceData)
SourceData[c(1:100)]
SourceData[c(1:100),]
SourceData[c(1:1000),]
SourceData[c(1:10000),]
head(SourceData)
SourceDataGrouped=group_by(interval, weekendLogical)  #group_by creates factor groups
install.packages("dplyr")
library(dplyr)
SourceDataGrouped=group_by(interval, weekendLogical)  #group_by creates factor groups
SourceDataGrouped=group_by(SourceData,interval, weekendLogical)  #group_by creates factor groups
head(SourceDataGrouped)
summarise(SourceDataGrouped,mean(steps))
summarise(SourceDataGrouped,mean(steps,na.rm=T))
SourceDataGroupedAndAveraged=summarise(SourceDataGrouped,mean(steps,na.rm=T))
class(SourceDataGroupedAndAveraged)
str(SourceDataGroupedAndAveraged)
names(SourceDataGroupedAndAveraged) = c("interval","weekendLogical","Average")
str(SourceDataGroupedAndAveraged)
SourceDataGroupedAndAveraged[1,]
install.packages("ggplot2")
library(ggplot2)
qplot(interval, Average, data = SourceDataGroupedAndAveraged, facets=.~weekendLogical)
qplot(interval, Average, data = SourceDataGroupedAndAveraged, type="l",facets=.~weekendLogical)
qplot(interval, Average, data = SourceDataGroupedAndAveraged,facets=.~weekendLogical,geom="line")
ifelse(weekendLogical,"Weekend","Weekday")
SourceData$IsWeekend=ifelse(weekendLogical,"Weekend","Weekday")
head(SourceData)
sapply(SourceData, class)
SourceData$IsWeekend=as.factor(ifelse(weekendLogical,"Weekend","Weekday"))
sapply(SourceData, class)
head(SourceData)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
SourceData$daysofweek = as.factor(weekdays(SourceData$date))
weekendLogical=as.logical(SourceData$daysofweek=='Saturday') | as.logical(SourceData$daysofweek=='Sunday')
SourceData$IsWeekend=as.factor(ifelse(weekendLogical,"Weekend","Weekday"))
SourceDataGrouped=group_by(SourceData,interval, IsWeekend)  #group_by creates factor groups
SourceDataGroupedAndAveraged=summarise(SourceDataGrouped,mean(steps,na.rm=T))
names(SourceDataGroupedAndAveraged)
head(SourceDataGroupedAndAveraged)
names(SourceDataGroupedAndAveraged) = c("interval","IsWeekend","Average")
qplot(interval, Average, data = SourceDataGroupedAndAveraged,facets=.~weekendLogical,geom="line")
head(SourceDataGroupedAndAveraged)
qplot(interval, Average, data = SourceDataGroupedAndAveraged,facets=.~IsWeekend,geom="line")
```{r, echo=TRUE}
SourceData$daysofweek = as.factor(weekdays(SourceData$date))
weekendLogical=as.logical(SourceData$daysofweek=='Saturday') | as.logical(SourceData$daysofweek=='Sunday')
SourceData$IsWeekend=as.factor(ifelse(weekendLogical,"Weekend","Weekday"))
SourceDataGrouped=group_by(SourceData,interval, IsWeekend)  #group_by creates factor groups
SourceData$daysofweek = as.factor(weekdays(SourceData$date))
weekendLogical=as.logical(SourceData$daysofweek=='Saturday') | as.logical(SourceData$daysofweek=='Sunday')
SourceData$IsWeekend=as.factor(ifelse(weekendLogical,"Weekend","Weekday"))
SourceDataGrouped=group_by(SourceData,interval, IsWeekend)  #group_by creates factor groups
SourceDataGroupedAndAveraged=summarise(SourceDataGrouped,mean(steps,na.rm=T))
head(SourceDataGroupedAndAveraged)
names(SourceDataGroupedAndAveraged) = c("interval","IsWeekend","Average")
qplot(interval, Average, data = SourceDataGroupedAndAveraged,facets=.~IsWeekend,geom="line")
